C51 COMPILER V9.56.0.0   LCD_CLOCK                                                         11/17/2017 22:19:03 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE LCD_CLOCK
OBJECT MODULE PLACED IN .\Objects\LCD_Clock.obj
COMPILER INVOKED BY: C:\Program Files\C51\BIN\C51.EXE LCD_Clock.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Li
                    -stings\LCD_Clock.lst) TABS(2) OBJECT(.\Objects\LCD_Clock.obj)

line level    source

   1          // This program interface 8051 with a 16x2 line LCD. It used port 2 as data bus, 
   2          // port as control bus, and displays Hello World!on the first display line
   3          #include <reg51.h>
   4          
   5          #define ldata P2
   6          #define COMMAND 0
   7          #define LCD_DATA 1
   8          
   9          sbit rs = P3^6;
  10          sbit rw = P3^5;
  11          sbit en = P3^7;
  12          sbit busy = P2^7; // connected to DB7 on the LCD
  13          
  14          void init_lcd();
  15          void write_to_lcd(unsigned char value, bit mode);
  16          void MSDelay(unsigned int itime);
  17          void lcdready(void);
  18          
  19          
  20          void main(void)
  21          {
  22   1        unsigned int count;
  23   1        
  24   1        //Initializing every decimal place to 0
  25   1        char msbHour = 0x30;
  26   1        char lsbHour = 0x30;
  27   1        char msbMinute = 0x30;
  28   1        char lsbMinute = 0x30;
  29   1        
  30   1        unsigned char code ctr[]="Counter:";
  31   1        unsigned char i=0;
  32   1        init_lcd();                                                                                       
  33   1      
  34   1        while (ctr[i]!='\0') 
  35   1         write_to_lcd(ctr[i++],LCD_DATA);
  36   1        
  37   1        
  38   1        for (count = 0; count <= 99999999; count++){    
  39   2          if (lsbMinute > 0x39){
  40   3            lsbMinute = 0x30;
  41   3            msbMinute++;
  42   3            if (msbMinute > 0x35){
  43   4              msbMinute = 0x30;
  44   4              lsbHour++;
  45   4              if (lsbHour > 0x39){
  46   5                lsbHour = 0x30;
  47   5                msbHour++;
  48   5              }
  49   4              else if (lsbHour > 0x31 & msbHour == 0x31){
  50   5                msbHour = 0x30;
  51   5                lsbHour = 0x30;
  52   5              }
  53   4            }
  54   3          }
C51 COMPILER V9.56.0.0   LCD_CLOCK                                                         11/17/2017 22:19:03 PAGE 2   

  55   2          
  56   2          write_to_lcd(msbHour,LCD_DATA);
  57   2          write_to_lcd(lsbHour,LCD_DATA);
  58   2          write_to_lcd(0x3A,LCD_DATA);
  59   2          write_to_lcd(msbMinute,LCD_DATA);
  60   2          write_to_lcd(lsbMinute,LCD_DATA);
  61   2          
  62   2          lsbMinute++; //Incrementing least significant bit
  63   2          
  64   2          MSDelay(5);
  65   2          
  66   2          /*Resets cursor position to start of number.
  67   2          Only changes where you want to move number, 
  68   2          does not change no matter how big number is.*/
  69   2          write_to_lcd(0x88,COMMAND); 
  70   2        }
  71   1        
  72   1        while (1);
  73   1          
  74   1      }
  75          
  76          
  77          //  JOHN's Functions //
  78          
  79          
  80          // setup LCD for the required display 
  81          void init_lcd()
  82          {
  83   1        // Function set format: 001 DL N F  * *
  84   1        // Function set value: 00111000
  85   1        // DL=1, use 8-bit data bus; N=1,1/16 duty(2 lines),
  86   1        // F=0, 5x7 dot character font 
  87   1        write_to_lcd(0x38,COMMAND); 
  88   1                                    
  89   1        // Display On/Off Control format: 00001 D C B
  90   1        // Display On/Off Control value: 00001110
  91   1        // D=1, display on; C=1, cursor on; B=0, cursor blink off
  92   1        write_to_lcd(0x0E,COMMAND);
  93   1      
  94   1        // Entry mode set format: 000001 I/D S
  95   1        // Entry mode set value: 00000110
  96   1        // I/D=1, Increment cursor position; S=0, no display shift
  97   1        write_to_lcd(0x06,COMMAND);
  98   1      
  99   1        // Clear display and returns cursor to the home position(address 0) 
 100   1        write_to_lcd(0x01,COMMAND);
 101   1      }
 102          
 103          // write a command or a character to LCD
 104          void write_to_lcd(unsigned char value, bit mode)
 105          {
 106   1        lcdready();
 107   1        ldata = value; 
 108   1        rs = mode; // set for data, reset for command
 109   1        rw = 0;
 110   1        en = 1;
 111   1        MSDelay(1);
 112   1        en = 0;
 113   1      }
 114          
 115          void MSDelay(unsigned int itime)
 116          {
C51 COMPILER V9.56.0.0   LCD_CLOCK                                                         11/17/2017 22:19:03 PAGE 3   

 117   1         unsigned int i, j;
 118   1      
 119   1         for (i=0;i<itime;i++)
 120   1           for (j=0;j<1275;j++);
 121   1          //for (j=0;j<1;j++); //Cannot catch up to such a quick speed
 122   1      }
 123          
 124          // wait for LCD to become ready
 125          void lcdready(void)
 126          {
 127   1        busy = 1;
 128   1        en = 1;
 129   1        rs = 0; // It's a command
 130   1        rw = 1; // It's a read command
 131   1        while (busy) {
 132   2          en = 0;
 133   2          MSDelay(1);
 134   2          en = 1;
 135   2        }
 136   1        en=0;
 137   1        rw=0;
 138   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    328    ----
   CONSTANT SIZE    =      9    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
