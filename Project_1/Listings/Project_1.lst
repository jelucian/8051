C51 COMPILER V9.56.0.0   PROJECT_1                                                         10/24/2017 18:48:06 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE PROJECT_1
OBJECT MODULE PLACED IN .\Objects\Project_1.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Project_1.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings
                    -\Project_1.lst) TABS(2) OBJECT(.\Objects\Project_1.obj)

line level    source

   1          /********************************************************************************
   2           *
   3           * Author:   Rosswell Tiongco & Jesus Luciano
   4           * Email:    rosswelltiongco@gmail.com & jlucian995@gmail.com
   5           * Filename: Project_1.c
   6           * Date:     10/16/17
   7           * Version:  1.0
   8           *
   9           * Description: 
  10           *
  11           * Mode 1: bouncing mode, MSB -> LSB -> MSB
  12                      -shift 7 times then shift 7 times back
  13           * Mode 2: 4 bit upcounter, external interrupt P3.2 determins count up or count down
  14           *         
  15           *         P0.4 - P0.7 to control inital value
  16           * Mode 3: double bouncing, b7 & b0 -> b6 & b1 -> b5 & b2 -> b4 & b3 then repeat
  17           * Mode 4: stack mode b7 -> b7 &b6 -> b7 & b6 & b5 etc then repeat
  18           * 
  19           * Mode control bits: p0.0 & p0.1
  20           * Speed control: P0.3 & P0.2
  21           * 00 0.1 seconds
  22           * 01 0.5 seconds
  23           * 10 1 seconds
  24           * 11 2 seconds
  25           *
  26           * Mode changed only when P3.3 push button set high
  27           * 
  28           *******************************************************************************/
  29          #include <reg51.h>
  30          
  31          //declare control bits
  32          sbit M0 = P0^0;
  33          sbit M1 = P0^1;
  34          sbit dir = P3^2;
  35          sbit D1 = P0^3;
  36          sbit D0 = P0^2;
  37          bit varM1 = 0;
  38          bit varM0 = 0;
  39          int direction = 1;
  40          
  41          unsigned int i, j, x, y, count, delayVal = 0;
  42          
  43          //Timer
  44          void timer0(void) interrupt 1{//50ms 
  45   1        TR0 = 0;//turn timer off
  46   1        delayVal = delayVal - 1;//decrease delay value
  47   1        TH0 = 0x4B;//initial values
  48   1        TL0 = 0xFD;
  49   1      //  TR0 = 1;//turn timer on
  50   1      }
  51          void changeMode() interrupt 2{
  52   1        varM0 = M0;
  53   1        varM1 = M1;
  54   1        
C51 COMPILER V9.56.0.0   PROJECT_1                                                         10/24/2017 18:48:06 PAGE 2   

  55   1      }
  56          void changeDir() interrupt 0{
  57   1        if(direction == 1)
  58   1          direction = -1;
  59   1        else
  60   1          direction = 1;
  61   1      }
  62          
  63          void delay();
  64          
  65          //Mode 0
  66          void bounce();
  67          
  68          //Mode 1
  69          void counter();
  70          
  71          //Mode 2  
  72          void doubleBounce();
  73          
  74          //Mode 3
  75          void stack();
  76          /********************************************************/
  77          int main(){
  78   1        //Interrupt enable
  79   1        EA = 1;
  80   1        ET0 = 1;
  81   1        
  82   1        //Timer enable
  83   1        TMOD = 0x01;//timer 0 mode 1
  84   1        TH0 = 0x4B;//high bit value
  85   1        TL0 = 0x92;//low bit value
  86   1        TR0 = 0;//turn off timer 0
  87   1        
  88   1        //enable external interrupts
  89   1        EX1 = 1;
  90   1        EX0 = 1;
  91   1        //I/O
  92   1        //Inputs
  93   1        P0 = 0xFF;
  94   1        P3 = 0xFF;
  95   1        
  96   1        //Outputs
  97   1        P1 = 0x00;
  98   1      
  99   1        //super loop
 100   1        while(1){
 101   2          //call all 4 functions, each one checks seperately
 102   2          //if mode bits are correct
 103   2          bounce();
 104   2          counter();
 105   2          doubleBounce();
 106   2          stack();
 107   2        }
 108   1        
 109   1      }
 110          /********************************************************/
 111          //time delay is 1.0825us
 112          //<<Timing not currently accurate
 113          
 114          void delay(){
 115   1        //Delay 0 = 0.1 sec
 116   1        if(~D1 & ~D0){
C51 COMPILER V9.56.0.0   PROJECT_1                                                         10/24/2017 18:48:06 PAGE 3   

 117   2          delayVal = 2;
 118   2        }
 119   1        //Delay 1 = 0.5 sec
 120   1        else if(~D1 & D0){
 121   2          delayVal = 10;
 122   2        }
 123   1        //Delay 2 = 1 sec
 124   1        else if(D1 & ~D0){
 125   2          delayVal = 20;
 126   2        }
 127   1        //Delay 3 = 2 sec
 128   1        else{
 129   2          delayVal = 40;
 130   2        }
 131   1        //stay in loop with timer 0 on until
 132   1        //delayVal = 0
 133   1        //delayVal decreases once every 5ms
 134   1        while(delayVal > 0){
 135   2            TR0 = 1;
 136   2        }
 137   1        TR0 = 0;
 138   1      }
 139          
 140          
 141          //Mode 0
 142          void bounce(){
 143   1        //set initial value
 144   1        P1 = 0x80;
 145   1        x = 0;
 146   1        //Continuously checks if still in mode 0 every loop
 147   1        while(~varM1 & ~varM0){
 148   2          //move left 7 times
 149   2          if(x < 7){
 150   3            P1 = P1 / 2 ;
 151   3            x = x+1;
 152   3          }
 153   2          //move right 7 times
 154   2          else if(x < 14){
 155   3            P1 = P1 * 2;
 156   3            x = x+1;
 157   3          }
 158   2          //reset counter
 159   2          else{
 160   3            x = 0;
 161   3          }
 162   2          //call delay after every change
 163   2          delay();
 164   2        }
 165   1        
 166   1      }
 167          //Mode 1
 168          void counter(){
 169   1        //only pulls bits P0^7-P0^4
 170   1        count = P0 / 16;  //FIXME: What does this line do? Seems to work when uncommented
 171   1        //continuously checks if in mode 1
 172   1        while(~varM1 & varM0){
 173   2          P1 = count;
 174   2          //increases counter if P3^2 is high
 175   2          //if(~direction){
 176   2            count = count + direction;
 177   2          //}
 178   2          //decreases counter if P3^2 is low
C51 COMPILER V9.56.0.0   PROJECT_1                                                         10/24/2017 18:48:06 PAGE 4   

 179   2          /*else{
 180   2            count = count - 1;
 181   2          }*/
 182   2          
 183   2          //checks if count is out of bounds and resets
 184   2          if(count == 16){
 185   3            count = 0; 
 186   3          }
 187   2          if(count == -1){
 188   3            count = 15;
 189   3          }
 190   2          //call delay after every iteration
 191   2          delay();
 192   2        }
 193   1      }
 194          //Mode 2
 195          void doubleBounce(){
 196   1        //Left << 1 | Right >> 1
 197   1        //Can also be done as: (0x80>>iteration) | (0x01 << iteration)
 198   1        //set initial value
 199   1        P1 = 0x81;
 200   1        x = 0x80;
 201   1        y = 0x01;
 202   1        count = 0;
 203   1        //Continuously checks if still in mode 2 every loop
 204   1        while(varM1 & ~varM0){
 205   2          //Both sides shift 7 times
 206   2          if(count < 7){
 207   3            P1 = x | y;
 208   3            x = x / 2;
 209   3            y = y * 2;
 210   3            count++;
 211   3          }
 212   2          else if (count < 14){
 213   3            P1 = x | y;
 214   3            x = x * 2;
 215   3            y = y / 2;
 216   3            count++;
 217   3          }
 218   2          //reset counter and dummy switches
 219   2          else{
 220   3            count = 0;
 221   3            x = 0x80;
 222   3            y = 0x01;
 223   3          }
 224   2          //call delay after every change
 225   2          delay();
 226   2        }
 227   1      }
 228          //Mode 3
 229          void stack(){
 230   1        //Can also be done as LED | LED>>1
 231   1          //set initial value
 232   1        P1 = 0x00;
 233   1        //couldn't get it to work with the same variable (step through xor process)
 234   1        x = 0x80;
 235   1        y = 0x01;
 236   1        count = 0;
 237   1        //Continuously checks if still in mode 0 every loop
 238   1        while(varM1 & varM0){
 239   2          //Stack 8 times
 240   2          if(count < 8){
C51 COMPILER V9.56.0.0   PROJECT_1                                                         10/24/2017 18:48:06 PAGE 5   

 241   3            P1 = P1 ^ x;
 242   3            x = x/2;
 243   3            count++;
 244   3          }
 245   2          else if (count < 16){
 246   3            P1 = P1 ^ y;
 247   3            y = y*2;
 248   3            count++;
 249   3          }
 250   2          //reset x and y to original values, otherwise they would take in their old values
 251   2          else{
 252   3            count = 0;
 253   3            x = 0x80;
 254   3            y = 0x01;
 255   3          }
 256   2              
 257   2          //call delay after every change
 258   2          delay();
 259   2          }
 260   1      
 261   1        }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    576    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
